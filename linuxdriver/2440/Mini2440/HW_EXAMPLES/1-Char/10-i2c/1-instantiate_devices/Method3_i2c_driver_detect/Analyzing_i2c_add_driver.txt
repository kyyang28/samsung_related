1. i2c_add_driver
			return i2c_register_driver(THIS_MODULE, driver);
									driver->driver.owner = owner;
									driver->driver.bus = &i2c_bus_type;
									
									/* When registration returns, the driver core
									 * will have called probe() for all matching-but-unbound devices.
									 */
									res = driver_register(&driver->driver);	 /* Add the driver onto the driver list */
									
									bus_for_each_dev(&i2c_bus_type, NULL, driver, __process_new_driver);
									
2. __process_new_driver
			return i2c_do_add_adapter(data, to_i2c_adapter(dev));
									i2c_detect(adap, driver);
									
									if (driver->attach_adapter) {
											/* We ignore the return code; if it fails, too bad */
											driver->attach_adapter(adap);
									}

3. i2c_detect
			int adap_id = i2c_adapter_id(adapter);
			
			address_list = driver->address_list;
			if (!driver->detect || !address_list)
					return 0;
					
			if (!(adapter->class & driver->class))
					return 0;
					
			for (i = 0; address_list[i] != I2C_CLIENT_END; i += 1) {
					dev_dbg(&adapter->dev, "found normal entry for adapter %d, "
						"addr 0x%02x\n", adap_id, address_list[i]);
					temp_client->addr = address_list[i];
					err = i2c_detect_address(temp_client, driver);
					if (unlikely(err))
						break;
			}


4. i2c_detect_address
			/* Make sure the address is valid */
				err = i2c_check_addr_validity(addr);

			/* Skip if already in use */
			if (i2c_check_addr_busy(adapter, addr))
					return 0;

			/* Make sure there is something at this address */
			if (!i2c_default_probe(adapter, addr))
					return 0;

			/* Finally call the custom detection function */
			memset(&info, 0, sizeof(struct i2c_board_info));
			info.addr = addr;
			err = driver->detect(temp_client, &info);

			client = i2c_new_device(adapter, &info);			/* If everything is fine, call the i2c_new_device */
			if (client)
					list_add_tail(&client->detected, &driver->clients);

